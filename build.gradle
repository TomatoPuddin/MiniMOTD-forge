buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id "net.kyori.blossom" version "1.2.0"
}

apply plugin: 'org.spongepowered.mixin'

group = 'xyz.jpenilla'
version = '2.0.2a'
ext["url"] = "https://github.com/TomatoPuddin/MiniMOTD-forge"

java {
    archivesBaseName = 'minimotd-forge-1.16.5'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

minecraft {
    mappings channel: 'snapshot', version: '20210309-1.16.5'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                minimotd {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                minimotd {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'minimotd', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                minimotd {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "minimotd.refmap.json"

    config "minimotd.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.34'

    shadow 'net.kyori:adventure-api:4.11.0'
    shadow('net.kyori:adventure-text-serializer-gson:4.11.0'){
        exclude group: 'com.google.code.gson', module: 'gson'
    }
    shadow 'net.kyori:adventure-text-minimessage:4.11.0'
    shadow 'org.spongepowered:configurate-hocon:4.1.2'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

blossom {
    ext.replaceConstants = { token, target ->
        replaceToken("\${${token}}", target, "src/main/java/xyz/jpenilla/minimotd/common/Constants.java")
    }

    replaceConstants 'PLUGIN_NAME', rootProject.name
    replaceConstants 'PLUGIN_VERSION', project.version.toString()
    replaceConstants 'PLUGIN_WEBSITE', rootProject.ext["url"].toString()
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "TomatoPuddin",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "TomatoPuddin",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar  {
    manifest {
        inheritFrom project.tasks.jar.manifest
    }
    configurations = [project.configurations.shadow]
    finalizedBy 'reobfShadowJar'

    ext.relocateLib = { lib, target ->
        relocate(lib, "${project.group}.lib.${target}")
    }
    relocateLib "io.leangen.geantyref", "leangen.geantyref"
    relocateLib "org.spongepowered.configurate", "spongepowered.configurate"
    relocateLib "com.typesafe.config", "typesafe.config"
    relocateLib "org.checkerframework", "checkerframework"
    relocateLib "net.kyori", "kyori"
    relocateLib "org.checkerframework", "checkerframework"
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
