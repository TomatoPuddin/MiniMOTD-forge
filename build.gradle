buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id "net.kyori.blossom" version "1.2.0"
}

apply plugin: 'org.spongepowered.mixin'

group = 'xyz.jpenilla'
version = '2.0.2fix2'
ext["mod_id"] = 'minimotd'
ext["url"] = "https://github.com/TomatoPuddin/MiniMOTD-forge"

java {
    archivesBaseName = 'minimotd-forge-1.12.2'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                minimotd {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                minimotd {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "minimotd.refmap.json"

    config "minimotd.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    embed
    implementation.extendsFrom(embed)
}

repositories {
    maven { url = 'https://maven.cleanroommc.com' }
    mavenCentral()
}


dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    embed 'net.kyori:adventure-api:4.13.0'
    embed('net.kyori:adventure-text-serializer-gson:4.13.0'){
        exclude group: 'com.google.code.gson', module: 'gson'
    }
    embed 'net.kyori:adventure-text-minimessage:4.13.0'
    embed 'org.spongepowered:configurate-hocon:4.1.2'
    compileOnly 'zone.rong:mixinbooter:8.3'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

blossom {
    ext.replaceConstants = { token, target ->
        replaceToken("\${${token}}", target, "src/main/java/xyz/jpenilla/minimotd/common/Constants.java")
    }

    replaceConstants 'PLUGIN_NAME', project.name
    replaceConstants 'PLUGIN_VERSION', project.version.toString()
    replaceConstants 'PLUGIN_WEBSITE', project.ext["url"].toString()
    replaceConstants 'PLUGIN_ID', project.ext["mod_id"].toString()
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "TomatoPuddin",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "TomatoPuddin",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'FMLCorePluginContainsFMLMod': true,
                'FMLCorePlugin'           : 'xyz.jpenilla.minimotd.forge.core.CoreMod',
                "ForceLoadAsMod"          : "true",
                "TweakClass"              : "org.spongepowered.asm.launch.MixinTweaker",
                'FMLAT'                   : 'accesstransformer.cfg'
        ])
    }
}

jar.finalizedBy('reobfJar')

shadowJar  {
    manifest {
        inheritFrom project.tasks.jar.manifest
    }
    configurations = [project.configurations.embed]
    exclude { FileTreeElement el -> el.RelativePath.PathString.startsWith("META-INF/versions/") }

    archiveClassifier = null
    finalizedBy 'reobfShadowJar'

    ext.relocateLib = { lib, target ->
        relocate(lib, "${project.group}.lib.${target}")
    }
    relocateLib "io.leangen.geantyref", "leangen.geantyref"
    relocateLib "org.spongepowered.configurate", "spongepowered.configurate"
    relocateLib "com.typesafe.config", "typesafe.config"
    relocateLib "org.checkerframework", "checkerframework"
    relocateLib "net.kyori", "kyori"
    relocateLib "org.checkerframework", "checkerframework"
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

processResources {
    duplicatesStrategy = 'include'

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version': version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}